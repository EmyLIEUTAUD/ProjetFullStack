{"ast":null,"code":"import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request; // wrap in delayed observable to simulate server api call\n\n      return of(null).pipe(mergeMap(handleRoute)).pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\n      .pipe(delay(500)).pipe(dematerialize());\n\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/users/authenticate') && method === 'POST':\n            return authenticate();\n\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      } // route functions\n\n\n      function authenticate() {\n        const {\n          username,\n          password\n        } = body;\n        const user = users.find(x => x.username === username && x.password === password);\n        if (!user) return error('Username or password is incorrect');\n        return ok({\n          id: user.id,\n          username: user.username,\n          prenom: user.prenom,\n          nom: user.nom,\n          token: 'fake-jwt-token'\n        });\n      }\n\n      function getUsers() {\n        if (!isLoggedIn()) return unauthorized();\n        return ok(users);\n      } // helper functions\n\n\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n\n      function error(message) {\n        return throwError(() => new Error(message));\n      }\n\n      function unauthorized() {\n        return throwError(() => new Error('Unauthorised'));\n      }\n\n      function isLoggedIn() {\n        return headers.get('Authorization') === 'Bearer fake-jwt-token';\n      }\n    }\n\n  }\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport let fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}