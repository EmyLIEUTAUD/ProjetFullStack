{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/token-storage.service\";\nconst TOKEN_HEADER_KEY = 'Authorization'; // for Spring Boot back-end\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(token) {\n      this.token = token;\n    }\n    intercept(req, next) {\n      let authReq = req;\n      const token = this.token.getToken();\n      if (token != null) {\n        authReq = req.clone({\n          headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n        });\n      }\n      return next.handle(authReq);\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptor;\n})();\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAAmB,sBAAsB;;;AAMnE,MAAMC,gBAAgB,GAAG,eAAe,CAAC,CAAO;AAMhD,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAG1BC,YAAoBC,KAA0B;MAA1B,UAAK,GAALA,KAAK;IAAyB;IAElDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;MAChD,IAAIC,OAAO,GAAGF,GAAG;MACjB,MAAMF,KAAK,GAAG,IAAI,CAACA,KAAK,CAACK,QAAQ,EAAE;MACnC,IAAIL,KAAK,IAAI,IAAI,EAAE;QACjBI,OAAO,GAAGF,GAAG,CAACI,KAAK,CAAC;UAAEC,OAAO,EAAEL,GAAG,CAACK,OAAO,CAACC,GAAG,CAACX,gBAAgB,EAAE,SAAS,GAAGG,KAAK;QAAC,CAAE,CAAC;;MAExF,OAAOG,IAAI,CAACM,MAAM,CAACL,OAAO,CAAC;IAC7B;;;qBAZWN,eAAe;EAAA;;WAAfA,eAAe;IAAAY,SAAfZ,eAAe;IAAAa,YAFd;EAAM;EAAA,OAEPb,eAAe;AAAA;AAe5B,OAAO,MAAMc,wBAAwB,GAAG,CACtC;EAAEC,OAAO,EAAEjB,iBAAiB;EAAEkB,QAAQ,EAAEhB,eAAe;EAAEiB,KAAK,EAAE;AAAI,CAAE,CACvE","names":["HTTP_INTERCEPTORS","TOKEN_HEADER_KEY","AuthInterceptor","constructor","token","intercept","req","next","authReq","getToken","clone","headers","set","handle","factory","providedIn","authInterceptorProviders","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\yunqi\\IdeaProjet\\ProjetFullStack\\VaccinationCOVID\\src\\app\\_helpers\\auth.interceptor.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\r\nimport { TokenStorageService } from '../_services/token-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n\r\n  constructor(private token: TokenStorageService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let authReq = req;\r\n    const token = this.token.getToken();\r\n    if (token != null) {\r\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\r\n    }\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n\r\nexport const authInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\r\n];"]},"metadata":{},"sourceType":"module","externalDependencies":[]}