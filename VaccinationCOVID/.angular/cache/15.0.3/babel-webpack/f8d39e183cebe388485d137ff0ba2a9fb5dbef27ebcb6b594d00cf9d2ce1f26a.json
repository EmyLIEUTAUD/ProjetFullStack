{"ast":null,"code":"import { interval } from 'rxjs/internal/observable/interval';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/progress-bar\";\nfunction WaitingComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function WaitingComponent_ng_container_6_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.backToHome());\n    });\n    i0.ɵɵtext(2, \"revenir a l'acceuil\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport let WaitingComponent = /*#__PURE__*/(() => {\n  class WaitingComponent {\n    constructor(route, router) {\n      this.route = route;\n      this.router = router;\n      this.progressbarValue = 100;\n      this.tempsInitial = 0;\n      this.finishedTimer = false;\n      this.tempsRestant = 0;\n    }\n    ngOnInit() {\n      console.log('waiting');\n      this.sub = this.route.params.subscribe(params => {\n        this.tempsInitial = +params['temps'];\n      });\n      if (this.tempsInitial === 0) {\n        this.finishedTimer = true;\n      }\n      this.startTimer();\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n    }\n    startTimer() {\n      const tempsInitial = this.tempsInitial;\n      this.tempsRestant = this.tempsInitial;\n      const timer$ = interval(1000);\n      const sub = timer$.subscribe(sec => {\n        sec = sec + 1;\n        this.progressbarValue = 100 - sec * 100 / tempsInitial;\n        this.tempsRestant = tempsInitial - sec;\n        if (sec === tempsInitial) {\n          sub.unsubscribe();\n          this.finishedTimer = true;\n        }\n      });\n    }\n    backToHome() {\n      this.router.navigate(['/home']);\n    }\n  }\n  WaitingComponent.ɵfac = function WaitingComponent_Factory(t) {\n    return new (t || WaitingComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  WaitingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WaitingComponent,\n    selectors: [[\"app-waiting\"]],\n    decls: 7,\n    vars: 3,\n    consts: [[\"mode\", \"determinate\", 3, \"value\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function WaitingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-content\");\n        i0.ɵɵelement(4, \"mat-progress-bar\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-actions\");\n        i0.ɵɵtemplate(6, WaitingComponent_ng_container_6_Template, 3, 0, \"ng-container\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.tempsRestant, \" secondes restantes \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.progressbarValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.finishedTimer);\n      }\n    },\n    dependencies: [i2.NgIf, i3.MatCard, i3.MatCardActions, i3.MatCardContent, i3.MatCardHeader, i4.MatButton, i5.MatProgressBar]\n  });\n  return WaitingComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}