{"ast":null,"code":"import { HttpErrorResponse } from '@Angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let GeneralHttpInterceptorService = /*#__PURE__*/(() => {\n  class GeneralHttpInterceptorService {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      console.log(\"J'intercepte les erreurs http\");\n      const token = 'invald token';\n      //req = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + token) });\n      req = req.clone();\n      return next.handle(req).pipe(catchError(error => {\n        let handled = false;\n        console.error(error);\n        if (error instanceof HttpErrorResponse) {\n          if (error.error instanceof ErrorEvent) {\n            console.error(\"Error Event\");\n          } else {\n            console.log(\"j'ai une erreur\");\n            console.log(`error status : ${error.status} ${error.statusText}`);\n            switch (error.status) {\n              case 401:\n                //unauthorized\n                console.log(\"erreur 401 : non authorisé\");\n                this.router.navigateByUrl(\"/login\");\n                console.log(`redirect to login`);\n                handled = true;\n                break;\n              case 403:\n                //forbidden\n                this.router.navigateByUrl(\"/login\");\n                console.log(`redirect to login`);\n                handled = true;\n                break;\n              case 304:\n                //not modified\n                console.log(\"on ne met pas à jour la ressource\");\n                handled = true;\n                break;\n              case 412:\n                //precondition failed\n                console.log(\"proposer à l'utilisateur de recharger la ressource\");\n                handled = true;\n                break;\n            }\n          }\n        } else {\n          console.error(\"Other Errors\");\n        }\n        if (handled) {\n          console.log('return back ');\n          return of(error);\n        } else {\n          console.log('throw error back to to the subscriber');\n          return throwError(error);\n        }\n      }));\n    }\n  }\n  GeneralHttpInterceptorService.ɵfac = function GeneralHttpInterceptorService_Factory(t) {\n    return new (t || GeneralHttpInterceptorService)(i0.ɵɵinject(i1.Router));\n  };\n  GeneralHttpInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeneralHttpInterceptorService,\n    factory: GeneralHttpInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return GeneralHttpInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}