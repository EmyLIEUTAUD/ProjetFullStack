{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ModalComponent } from './modal/modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"mdb-angular-ui-kit/modal\";\nexport let GeneralHttpInterceptorService = /*#__PURE__*/(() => {\n  class GeneralHttpInterceptorService {\n    constructor(router, modalService) {\n      this.router = router;\n      this.modalService = modalService;\n      this.modalRef = null;\n      this.infos = '';\n      this.temps = 0;\n    }\n    intercept(req, next) {\n      console.log(\"J'intercepte les erreurs http\");\n      const token = 'invalid token';\n      //req = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + token) });\n      req = req.clone();\n      return next.handle(req).pipe(catchError(error => {\n        let handled = false;\n        console.error(error);\n        console.log(\"j'ai une erreur\");\n        console.log(`error status : ${error.status} ${error.statusText}`);\n        switch (error.status) {\n          case 401:\n            //unauthorized\n            console.log(\"erreur 401 : non authorisé\");\n            this.router.navigateByUrl(\"/login\");\n            console.log(`redirect to login`);\n            handled = true;\n            break;\n          case 403:\n            //forbidden\n            this.router.navigateByUrl(\"/login\");\n            console.log(`redirect to login`);\n            handled = true;\n            break;\n          case 304:\n            //not modified\n            console.log(\"on ne met pas à jour la ressource\");\n            handled = true;\n            break;\n          case 412:\n            //precondition failed\n            this.modalRef = this.modalService.open(ModalComponent);\n            console.log(\"proposer à l'utilisateur de recharger la ressource\");\n            handled = true;\n            break;\n          case 429:\n            // too many requests\n            this.temps = error.headers.get('X-Rate-Limit-Retry-After-Seconds');\n            let url;\n            url = \"/queue/\" + this.temps;\n            this.router.navigateByUrl(url);\n            console.log(\"rediriger l'utilisateur vers la file d'attente\");\n            handled = true;\n            break;\n        }\n        if (handled) {\n          console.log('return back ');\n          return of(error);\n        } else {\n          console.log('throw error back to to the subscriber');\n          return throwError(error);\n        }\n      }));\n    }\n  }\n  GeneralHttpInterceptorService.ɵfac = function GeneralHttpInterceptorService_Factory(t) {\n    return new (t || GeneralHttpInterceptorService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MdbModalService));\n  };\n  GeneralHttpInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeneralHttpInterceptorService,\n    factory: GeneralHttpInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return GeneralHttpInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}